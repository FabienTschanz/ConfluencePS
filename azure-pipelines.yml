
pool:
  vmImage: windows-latest

resources:
- repo: self
  clean: 'true'

trigger:
  branches:
    include:
    - master
    - "*"
    exclude:
    - refs/tag/*

jobs:
- job: Phase_1
  displayName: Build Module
  condition: succeeded()

  steps:
  - powershell: |
       . ./Tools/setup.ps1
       Invoke-Build -Task ShowInfo
    displayName: Setup

  - powershell: 'Invoke-Build -Task Clean, Build'
    displayName: Build

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Built Module'
    inputs:
      PathtoPublish: Release
      ArtifactName: Release


- job: Phase_2
  displayName: Test Module on Windows (PSv5)
  dependsOn: Phase_1
  condition: succeeded()

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: Release
      downloadPath: '$(Build.SourcesDirectory)'

  - powershell: |
       . ./Tools/setup.ps1
       Invoke-Build -Task ShowInfo
    displayName: Setup

  - powershell: 'Invoke-Build -Task Test'
    displayName: Test

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()


- job: Phase_3
  displayName: Test Module on Ubuntu
  dependsOn: Phase_1
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: Release
      downloadPath: '$(Build.SourcesDirectory)'


  - powershell: |
       . ./Tools/setup.ps1
       Invoke-Build -Task ShowInfo
    displayName: Setup

  - powershell: 'Invoke-Build -Task Test'
    displayName: Test

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()


- job: Phase_4
  displayName: Test Module on macOS

  dependsOn: Phase_1
  condition: succeeded()
  pool:
    vmImage: 'macOS-latest'

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: Release
      downloadPath: '$(Build.SourcesDirectory)'

  - powershell: |
       . ./Tools/setup.ps1
       Invoke-Build -Task ShowInfo
    displayName: Setup

  - powershell: 'Invoke-Build -Task Test'
    displayName: Test

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()


- job: Phase_5
  displayName: Test Module on Windows (PSv7+)
  dependsOn: Phase_1
  condition: succeeded()

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: Release
      downloadPath: '$(Build.SourcesDirectory)'

  - task: PowerShell@2
    displayName: 'Setup'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        . ./Tools/setup.ps1
        Invoke-Build -Task ShowInfo

  - task: PowerShell@2
    displayName: Test
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        Invoke-Build -Task Test

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test-*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()


- job: Phase_6
  displayName: Test Module against Cloud Server
  dependsOn: Phase_1
  condition: succeeded()

  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: Release
      downloadPath: '$(Build.SourcesDirectory)'

  - powershell: |
       . ./Tools/setup.ps1
       Invoke-Build -Task ShowInfo
    displayName: Setup

  - powershell: 'Invoke-Build -Task Test -Tag "Integration" -ExcludeTag ""'
    env:
        WikiURI: WikiURI
        WikiUser: WikiUser
        WikiPass: WikiPass
    displayName: Test

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/Test*.xml'
    inputs:
      testRunner: NUnit
      testResultsFiles: '**/Test*.xml'
    condition: succeededOrFailed()
